/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class CustomersController {
    /**
     * Creates a access token for a customer
     *
     * @param {string} customerId Customer Id
     * @param {CustomersAccessTokensRequest} body Request for creating a access token
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createAccessToken(customerId, body, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/access-tokens';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'CustomersAccessTokensResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get all access tokens from a customer
     *
     * @param {string} customerId Customer Id
     * @param {int} page (optional) Page number
     * @param {int} size (optional) Page size
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAccessTokens(customerId, page, size, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/access-tokens';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            page,
            size,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'CustomersAccessTokensResponse1');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Updates a customer
     *
     * @param {string} customerId Customer id
     * @param {CustomersRequest} body Request for updating a customer
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateCustomer(customerId, body, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get a customer
     *
     * @param {string} customerId Customer Id
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getCustomer(customerId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Delete a Customer's access tokens
     *
     * @param {string} customerId Customer Id
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteAccessTokens(customerId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/access-tokens/';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'CustomersAccessTokensResponse1');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Gets all adressess from a customer
     *
     * @param {string} customerId Customer id
     * @param {int} page (optional) Page number
     * @param {int} size (optional) Page size
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAddresses(customerId, page, size, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/addresses';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            page,
            size,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersAddressesResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Creates a new address for a customer
     *
     * @param {string} customerId Customer Id
     * @param {CustomersAddressesRequest} body Request for creating an address
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createAddress(customerId, body, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/addresses';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersAddressesResponse1');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get a Customer's access token
     *
     * @param {string} customerId Customer Id
     * @param {string} tokenId Token Id
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAccessToken(customerId, tokenId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/access-tokens/{token_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            token_id: { value: tokenId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'CustomersAccessTokensResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Delete a customer's access token
     *
     * @param {string} customerId Customer Id
     * @param {string} tokenId Token Id
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteAccessToken(customerId, tokenId, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/access-tokens/{token_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            token_id: { value: tokenId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'CustomersAccessTokensResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get a customer's address
     *
     * @param {string} customerId Customer id
     * @param {string} addressId Address Id
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getAddress(customerId, addressId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/addresses/{address_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            address_id: { value: addressId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersAddressesResponse1');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Updates an address
     *
     * @param {string} customerId Customer Id
     * @param {string} addressId Address Id
     * @param {CustomersAddressesRequest1} body Request for updating an address
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateAddress(customerId, addressId, body, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/addresses/{address_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            address_id: { value: addressId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersAddressesResponse1');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Delete a Customer's address
     *
     * @param {string} customerId Customer Id
     * @param {string} addressId Address Id
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteAddress(customerId, addressId, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/addresses/{address_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            address_id: { value: addressId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersAddressesResponse1');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Creates a new card for a customer
     *
     * @param {string} customerId Customer id
     * @param {CustomersCardsRequest} body Request for creating a card
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createCard(customerId, body, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/cards';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersCardsResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get all cards from a customer
     *
     * @param {string} customerId Customer Id
     * @param {int} page (optional) Page number
     * @param {int} size (optional) Page size
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getCards(customerId, page, size, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/cards';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            page,
            size,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersCardsResponse1');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Renew a card
     *
     * @param {string} customerId Customer id
     * @param {string} cardId Card Id
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static renewCard(customerId, cardId, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/cards/{card_id}/renew';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            card_id: { value: cardId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersCardsRenewResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Creates a new customer
     *
     * @param {CustomersRequest1} body Request for creating a customer
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createCustomer(body, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/customers';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get all Customers
     *
     * @param {string} name (optional) Name of the Customer
     * @param {string} document (optional) Document of the Customer
     * @param {int} page (optional) Current page the the search
     * @param {int} size (optional) Quantity pages of the search
     * @param {string} email (optional) Customer's email
     * @param {string} code (optional) Customer's code
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getCustomers(name, document, page, size, email, code, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/customers';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            name,
            document,
            page: (page !== null) ? page : 1,
            size: (size !== null) ? size : 10,
            email,
            Code: code,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersResponse3');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Updates the metadata a customer
     *
     * @param {string} customerId The customer id
     * @param {CustomersMetadataRequest} body Request for updating the customer metadata
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateCustomerMetadata(customerId, body, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/Customers/{customer_id}/metadata';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PATCH',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersMetadataResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Updates a card
     *
     * @param {string} customerId Customer Id
     * @param {string} cardId Card id
     * @param {CustomersCardsRequest1} body Request for updating a card
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateCard(customerId, cardId, body, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/cards/{card_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            card_id: { value: cardId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersCardsResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Delete a customer's card
     *
     * @param {string} customerId Customer Id
     * @param {string} cardId Card Id
     * @param {string} idempotencyKey (optional) TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static deleteCard(customerId, cardId, idempotencyKey, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/cards/{card_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            card_id: { value: cardId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'idempotency-key': idempotencyKey,
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'DELETE',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersCardsResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get a customer's card
     *
     * @param {string} customerId Customer id
     * @param {string} cardId Card id
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getCard(customerId, cardId, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/customers/{customer_id}/cards/{card_id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            customer_id: { value: customerId, encode: true },
            card_id: { value: cardId, encode: true },
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            ServiceRefererName: _configuration.serviceRefererName,
            'user-agent': 'MundiSDK - Node 2.4.5',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'CustomersCardsResponse');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else if (_response.statusCode === 400) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid request';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid request', errorCode: 400, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 401) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Invalid API key';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Invalid API key', errorCode: 401, errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 404) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'An informed resource was not found';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'An informed resource was not found',
                        errorCode: 404,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Business validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Business validation error',
                        errorCode: 412,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 422) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Contract validation error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Contract validation error',
                        errorCode: 422,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 500) {
                    const mappedObject = _baseController.getObjectMapper()
                        .mapObject(JSON.parse(_context.response.body), 'ErrorException');
                    mappedObject.reason = 'Internal server error';
                    mappedObject.context = _context;
                    const _err = { errorMessage: 'Internal server error',
                        errorCode: 500,
                        errorResponse: mappedObject };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = CustomersController;

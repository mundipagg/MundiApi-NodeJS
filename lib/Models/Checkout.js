/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Checkout
 */
class Checkout extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.acceptedPaymentMethods =
          this.constructor.getValue(obj.acceptedPaymentMethods
     || obj.accepted_payment_methods);
        this.acceptedMultiPaymentMethods =
          this.constructor.getValue(obj.acceptedMultiPaymentMethods
     || obj.accepted_multi_payment_methods);
        this.successUrl = this.constructor.getValue(obj.successUrl || obj.success_url);
        this.defaultPaymentMethod =
          this.constructor.getValue(obj.defaultPaymentMethod
     || obj.default_payment_method);
        this.gatewayAffiliationId =
          this.constructor.getValue(obj.gatewayAffiliationId
     || obj.gateway_affiliation_id);
        this.creditCard = this.constructor.getValue(obj.creditCard || obj.credit_card);
        this.debitCard = this.constructor.getValue(obj.debitCard || obj.debit_card);
        this.boleto = this.constructor.getValue(obj.boleto);
        this.customerEditable =
          this.constructor.getValue(obj.customerEditable
     || obj.customer_editable);
        this.expiresIn = this.constructor.getValue(obj.expiresIn || obj.expires_in);
        this.skipCheckoutSuccessPage =
          this.constructor.getValue(obj.skipCheckoutSuccessPage
     || obj.skip_checkout_success_page);
        this.billingAddressEditable =
          this.constructor.getValue(obj.billingAddressEditable
     || obj.billing_address_editable);
        this.billingAddress = this.constructor.getValue(obj.billingAddress || obj.billing_address);
        this.bankTransfer = this.constructor.getValue(obj.bankTransfer || obj.bank_transfer);
        this.acceptedBrands = this.constructor.getValue(obj.acceptedBrands || obj.accepted_brands);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'acceptedPaymentMethods', realName: 'accepted_payment_methods', array: true },
            {
                name: 'acceptedMultiPaymentMethods',
                realName: 'accepted_multi_payment_methods',
                array: true,
            },
            { name: 'successUrl', realName: 'success_url' },
            { name: 'defaultPaymentMethod', realName: 'default_payment_method' },
            { name: 'gatewayAffiliationId', realName: 'gateway_affiliation_id' },
            { name: 'creditCard', realName: 'credit_card', type: 'CreditCard2' },
            { name: 'debitCard', realName: 'debit_card', type: 'DebitCard2' },
            { name: 'boleto', realName: 'boleto', type: 'CreateCheckoutBoletoPaymentRequest' },
            { name: 'customerEditable', realName: 'customer_editable' },
            { name: 'expiresIn', realName: 'expires_in' },
            { name: 'skipCheckoutSuccessPage', realName: 'skip_checkout_success_page' },
            { name: 'billingAddressEditable', realName: 'billing_address_editable' },
            { name: 'billingAddress', realName: 'billing_address', type: 'BillingAddress1' },
            { name: 'bankTransfer', realName: 'bank_transfer', type: 'BankTransfer2' },
            { name: 'acceptedBrands', realName: 'accepted_brands', array: true },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Checkout;

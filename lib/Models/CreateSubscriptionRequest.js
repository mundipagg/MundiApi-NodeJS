/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of CreateSubscriptionRequest
 */
class CreateSubscriptionRequest extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.customer = this.constructor.getValue(obj.customer);
        this.card = this.constructor.getValue(obj.card);
        this.code = this.constructor.getValue(obj.code);
        this.paymentMethod = this.constructor.getValue(obj.paymentMethod || obj.payment_method);
        this.billingType = this.constructor.getValue(obj.billingType || obj.billing_type);
        this.statementDescriptor =
          this.constructor.getValue(obj.statementDescriptor
     || obj.statement_descriptor);
        this.description = this.constructor.getValue(obj.description);
        this.currency = this.constructor.getValue(obj.currency);
        this.interval = this.constructor.getValue(obj.interval);
        this.intervalCount = this.constructor.getValue(obj.intervalCount || obj.interval_count);
        this.pricingScheme = this.constructor.getValue(obj.pricingScheme || obj.pricing_scheme);
        this.items = this.constructor.getValue(obj.items);
        this.shipping = this.constructor.getValue(obj.shipping);
        this.discounts = this.constructor.getValue(obj.discounts);
        this.metadata = this.constructor.getValue(obj.metadata);
        this.setup = this.constructor.getValue(obj.setup);
        this.planId = this.constructor.getValue(obj.planId || obj.plan_id);
        this.customerId = this.constructor.getValue(obj.customerId || obj.customer_id);
        this.cardId = this.constructor.getValue(obj.cardId || obj.card_id);
        this.billingDay = this.constructor.getValue(obj.billingDay || obj.billing_day);
        this.installments = this.constructor.getValue(obj.installments);
        this.startAt = this.constructor.getValue(obj.startAt || obj.start_at);
        this.minimumPrice = this.constructor.getValue(obj.minimumPrice || obj.minimum_price);
        this.cycles = this.constructor.getValue(obj.cycles);
        this.cardToken = this.constructor.getValue(obj.cardToken || obj.card_token);
        this.gatewayAffiliationId =
          this.constructor.getValue(obj.gatewayAffiliationId
     || obj.gateway_affiliation_id);
        this.quantity = this.constructor.getValue(obj.quantity);
        this.boletoDueDays = this.constructor.getValue(obj.boletoDueDays || obj.boleto_due_days);
        this.increments = this.constructor.getValue(obj.increments);
        this.period = this.constructor.getValue(obj.period);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'customer', realName: 'customer', type: 'CreateCustomerRequest' },
            { name: 'card', realName: 'card', type: 'CreateCardRequest' },
            { name: 'code', realName: 'code' },
            { name: 'paymentMethod', realName: 'payment_method' },
            { name: 'billingType', realName: 'billing_type' },
            { name: 'statementDescriptor', realName: 'statement_descriptor' },
            { name: 'description', realName: 'description' },
            { name: 'currency', realName: 'currency' },
            { name: 'interval', realName: 'interval' },
            { name: 'intervalCount', realName: 'interval_count' },
            {
                name: 'pricingScheme',
                realName: 'pricing_scheme',
                type: 'CreatePricingSchemeRequest',
            },
            {
                name: 'items',
                realName: 'items',
                array: true,
                type: 'CreateSubscriptionItemRequest',
            },
            { name: 'shipping', realName: 'shipping', type: 'CreateShippingRequest' },
            {
                name: 'discounts',
                realName: 'discounts',
                array: true,
                type: 'CreateDiscountRequest',
            },
            { name: 'metadata', realName: 'metadata' },
            { name: 'setup', realName: 'setup', type: 'CreateSetupRequest' },
            { name: 'planId', realName: 'plan_id' },
            { name: 'customerId', realName: 'customer_id' },
            { name: 'cardId', realName: 'card_id' },
            { name: 'billingDay', realName: 'billing_day' },
            { name: 'installments', realName: 'installments' },
            { name: 'startAt', realName: 'start_at', isDateTime: true, dateTimeValue: 'rfc3339' },
            { name: 'minimumPrice', realName: 'minimum_price' },
            { name: 'cycles', realName: 'cycles' },
            { name: 'cardToken', realName: 'card_token' },
            { name: 'gatewayAffiliationId', realName: 'gateway_affiliation_id' },
            { name: 'quantity', realName: 'quantity' },
            { name: 'boletoDueDays', realName: 'boleto_due_days' },
            {
                name: 'increments',
                realName: 'increments',
                array: true,
                type: 'CreateIncrementRequest',
            },
            { name: 'period', realName: 'period', type: 'CreatePeriodRequest' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = CreateSubscriptionRequest;

/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of CreatePlanRequest
 */
class CreatePlanRequest extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.name = this.constructor.getValue(obj.name);
        this.description = this.constructor.getValue(obj.description);
        this.statementDescriptor =
          this.constructor.getValue(obj.statementDescriptor
     || obj.statement_descriptor);
        this.items = this.constructor.getValue(obj.items);
        this.shippable = this.constructor.getValue(obj.shippable);
        this.paymentMethods = this.constructor.getValue(obj.paymentMethods || obj.payment_methods);
        this.installments = this.constructor.getValue(obj.installments);
        this.currency = this.constructor.getValue(obj.currency);
        this.interval = this.constructor.getValue(obj.interval);
        this.intervalCount = this.constructor.getValue(obj.intervalCount || obj.interval_count);
        this.billingDays = this.constructor.getValue(obj.billingDays || obj.billing_days);
        this.billingType = this.constructor.getValue(obj.billingType || obj.billing_type);
        this.pricingScheme = this.constructor.getValue(obj.pricingScheme || obj.pricing_scheme);
        this.metadata = this.constructor.getValue(obj.metadata);
        this.minimumPrice = this.constructor.getValue(obj.minimumPrice || obj.minimum_price);
        this.cycles = this.constructor.getValue(obj.cycles);
        this.quantity = this.constructor.getValue(obj.quantity);
        this.trialPeriodDays =
          this.constructor.getValue(obj.trialPeriodDays
     || obj.trial_period_days);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'name', realName: 'name' },
            { name: 'description', realName: 'description' },
            { name: 'statementDescriptor', realName: 'statement_descriptor' },
            { name: 'items', realName: 'items', array: true, type: 'CreatePlanItemRequest' },
            { name: 'shippable', realName: 'shippable' },
            { name: 'paymentMethods', realName: 'payment_methods', array: true },
            { name: 'installments', realName: 'installments', array: true },
            { name: 'currency', realName: 'currency' },
            { name: 'interval', realName: 'interval' },
            { name: 'intervalCount', realName: 'interval_count' },
            { name: 'billingDays', realName: 'billing_days', array: true },
            { name: 'billingType', realName: 'billing_type' },
            { name: 'pricingScheme', realName: 'pricing_scheme', type: 'PricingScheme4' },
            { name: 'metadata', realName: 'metadata' },
            { name: 'minimumPrice', realName: 'minimum_price' },
            { name: 'cycles', realName: 'cycles' },
            { name: 'quantity', realName: 'quantity' },
            { name: 'trialPeriodDays', realName: 'trial_period_days' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = CreatePlanRequest;

/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of GetTransactionResponse
 */
class GetTransactionResponse extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.gatewayId = this.constructor.getValue(obj.gatewayId || obj.gateway_id);
        this.amount = this.constructor.getValue(obj.amount);
        this.status = this.constructor.getValue(obj.status);
        this.success = this.constructor.getValue(obj.success);
        this.createdAt = this.constructor.getValue(obj.createdAt || obj.created_at);
        this.updatedAt = this.constructor.getValue(obj.updatedAt || obj.updated_at);
        this.attemptCount = this.constructor.getValue(obj.attemptCount || obj.attempt_count);
        this.maxAttempts = this.constructor.getValue(obj.maxAttempts || obj.max_attempts);
        this.splits = this.constructor.getValue(obj.splits);
        this.nextAttempt = this.constructor.getValue(obj.nextAttempt || obj.next_attempt);
        this.transactionType =
          this.constructor.getValue(obj.transactionType
     || obj.transaction_type);
        this.id = this.constructor.getValue(obj.id);
        this.gatewayResponse =
          this.constructor.getValue(obj.gatewayResponse
     || obj.gateway_response);
        this.antifraudResponse =
          this.constructor.getValue(obj.antifraudResponse
     || obj.antifraud_response);
        this.metadata = this.constructor.getValue(obj.metadata);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'gatewayId', realName: 'gateway_id' },
            { name: 'amount', realName: 'amount' },
            { name: 'status', realName: 'status' },
            { name: 'success', realName: 'success' },
            {
                name: 'createdAt',
                realName: 'created_at',
                isDateTime: true,
                dateTimeValue: 'rfc3339',
            },
            {
                name: 'updatedAt',
                realName: 'updated_at',
                isDateTime: true,
                dateTimeValue: 'rfc3339',
            },
            { name: 'attemptCount', realName: 'attempt_count' },
            { name: 'maxAttempts', realName: 'max_attempts' },
            { name: 'splits', realName: 'splits', array: true, type: 'GetSplitResponse' },
            {
                name: 'nextAttempt',
                realName: 'next_attempt',
                isDateTime: true,
                dateTimeValue: 'rfc3339',
            },
            { name: 'transactionType', realName: 'transaction_type', isDiscrim: true },
            { name: 'id', realName: 'id' },
            {
                name: 'gatewayResponse',
                realName: 'gateway_response',
                type: 'GetGatewayResponseResponse',
            },
            {
                name: 'antifraudResponse',
                realName: 'antifraud_response',
                type: 'GetAntifraudResponse',
            },
            { name: 'metadata', realName: 'metadata' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {
            transaction: 'GetTransactionResponse',
            bank_transfer: 'GetBankTransferTransactionResponse',
            debit_card: 'GetDebitCardTransactionResponse',
            voucher: 'GetVoucherTransactionResponse',
            boleto: 'GetBoletoTransactionResponse',
            cash: 'GetCashTransactionResponse',
            safetypay: 'GetSafetyPayTransactionResponse',
            credit_card: 'GetCreditCardTransactionResponse',
            private_label: 'GetPrivateLabelTransactionResponse',
        };
    }
}

module.exports = GetTransactionResponse;

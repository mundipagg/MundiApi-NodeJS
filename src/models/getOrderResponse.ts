/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  dict,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  GetChargeResponse,
  getChargeResponseSchema,
} from './getChargeResponse';
import {
  GetCheckoutPaymentResponse,
  getCheckoutPaymentResponseSchema,
} from './getCheckoutPaymentResponse';
import {
  GetCustomerResponse,
  getCustomerResponseSchema,
} from './getCustomerResponse';
import {
  GetDeviceResponse,
  getDeviceResponseSchema,
} from './getDeviceResponse';
import {
  GetLocationResponse,
  getLocationResponseSchema,
} from './getLocationResponse';
import {
  GetOrderItemResponse,
  getOrderItemResponseSchema,
} from './getOrderItemResponse';
import {
  GetShippingResponse,
  getShippingResponseSchema,
} from './getShippingResponse';

/** Response object for getting an Order */
export interface GetOrderResponse {
  id: string;
  code: string;
  currency: string;
  items: GetOrderItemResponse[];
  customer?: GetCustomerResponse;
  status: string;
  createdAt: string;
  updatedAt: string;
  charges: GetChargeResponse[];
  invoiceUrl: string;
  shipping: GetShippingResponse;
  metadata: Record<string, string>;
  /** Checkout Payment Settings Response */
  checkouts?: GetCheckoutPaymentResponse[];
  /** Ip address */
  ip?: string;
  /** Session id */
  sessionId?: string;
  /** Location */
  location?: GetLocationResponse;
  /** Device's informations */
  device?: GetDeviceResponse;
  /** Indicates whether the order is closed */
  closed: boolean;
}

export const getOrderResponseSchema: Schema<any> = object({
  id: ['id', string()],
  code: ['code', string()],
  currency: ['currency', string()],
  items: ['items', array(lazy(() => getOrderItemResponseSchema))],
  customer: ['customer', optional(lazy(() => getCustomerResponseSchema))],
  status: ['status', string()],
  createdAt: ['created_at', string()],
  updatedAt: ['updated_at', string()],
  charges: ['charges', array(lazy(() => getChargeResponseSchema))],
  invoiceUrl: ['invoice_url', string()],
  shipping: ['shipping', lazy(() => getShippingResponseSchema)],
  metadata: ['metadata', dict(string())],
  checkouts: [
    'checkouts',
    optional(array(lazy(() => getCheckoutPaymentResponseSchema))),
  ],
  ip: ['ip', optional(string())],
  sessionId: ['session_id', optional(string())],
  location: ['location', optional(lazy(() => getLocationResponseSchema))],
  device: ['device', optional(lazy(() => getDeviceResponseSchema))],
  closed: ['closed', boolean()],
});

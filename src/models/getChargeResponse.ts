/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  discriminatedGetTransactionResponseSchema,
} from '../models/discriminatedSchemas';
import {
  dict,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  GetCustomerResponse,
  getCustomerResponseSchema,
} from './getCustomerResponse';
import {
  GetInvoiceResponse,
  getInvoiceResponseSchema,
} from './getInvoiceResponse';
import { GetOrderResponse, getOrderResponseSchema } from './getOrderResponse';
import { GetTransactionResponse } from './getTransactionResponse';

/** Response object for getting a charge */
export interface GetChargeResponse {
  id: string;
  code: string;
  gatewayId: string;
  amount: number;
  status: string;
  currency: string;
  paymentMethod: string;
  dueAt: string;
  createdAt: string;
  updatedAt: string;
  lastTransaction?: GetTransactionResponse;
  invoice?: GetInvoiceResponse;
  order?: GetOrderResponse;
  customer?: GetCustomerResponse;
  metadata: Record<string, string>;
  paidAt?: string;
  canceledAt?: string;
  /** Canceled Amount */
  canceledAmount: number;
  /** Paid amount */
  paidAmount: number;
  /** Defines whether the card has been used one or more times. */
  recurrencyCycle?: string;
  /** interest and fine paid */
  interestAndFinePaid?: number;
}

export const getChargeResponseSchema: Schema<any> = object({
  id: ['id', string()],
  code: ['code', string()],
  gatewayId: ['gateway_id', string()],
  amount: ['amount', number()],
  status: ['status', string()],
  currency: ['currency', string()],
  paymentMethod: ['payment_method', string()],
  dueAt: ['due_at', string()],
  createdAt: ['created_at', string()],
  updatedAt: ['updated_at', string()],
  lastTransaction: [
    'last_transaction',
    optional(lazy(() => discriminatedGetTransactionResponseSchema)),
  ],
  invoice: ['invoice', optional(lazy(() => getInvoiceResponseSchema))],
  order: ['order', optional(lazy(() => getOrderResponseSchema))],
  customer: ['customer', optional(lazy(() => getCustomerResponseSchema))],
  metadata: ['metadata', dict(string())],
  paidAt: ['paid_at', optional(string())],
  canceledAt: ['canceled_at', optional(string())],
  canceledAmount: ['canceled_amount', number()],
  paidAmount: ['paid_amount', number()],
  recurrencyCycle: ['recurrency_cycle', optional(string())],
  interestAndFinePaid: ['interest_and_fine_paid', optional(number())],
});

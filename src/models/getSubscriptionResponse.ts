/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  dict,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { GetCardResponse, getCardResponseSchema } from './getCardResponse';
import {
  GetCustomerResponse,
  getCustomerResponseSchema,
} from './getCustomerResponse';
import {
  GetDiscountResponse,
  getDiscountResponseSchema,
} from './getDiscountResponse';
import {
  GetIncrementResponse,
  getIncrementResponseSchema,
} from './getIncrementResponse';
import {
  GetPeriodResponse,
  getPeriodResponseSchema,
} from './getPeriodResponse';
import { GetSetupResponse, getSetupResponseSchema } from './getSetupResponse';
import {
  GetSubscriptionItemResponse,
  getSubscriptionItemResponseSchema,
} from './getSubscriptionItemResponse';
import {
  GetSubscriptionSplitResponse,
  getSubscriptionSplitResponseSchema,
} from './getSubscriptionSplitResponse';

export interface GetSubscriptionResponse {
  id: string;
  code: string;
  startAt: string;
  interval: string;
  intervalCount: number;
  billingType: string;
  currentCycle?: GetPeriodResponse;
  paymentMethod: string;
  currency: string;
  installments: number;
  status: string;
  createdAt: string;
  updatedAt: string;
  customer?: GetCustomerResponse;
  card: GetCardResponse;
  items: GetSubscriptionItemResponse[];
  statementDescriptor: string;
  metadata: Record<string, string>;
  setup: GetSetupResponse;
  /** Affiliation Code */
  gatewayAffiliationId: string;
  nextBillingAt?: string;
  billingDay?: number;
  minimumPrice?: number;
  canceledAt?: string;
  /** Subscription discounts */
  discounts?: GetDiscountResponse[];
  /** Subscription increments */
  increments: GetIncrementResponse[];
  /** Days until boleto expires */
  boletoDueDays?: number;
  /** Subscription's split response */
  split: GetSubscriptionSplitResponse;
}

export const getSubscriptionResponseSchema: Schema<GetSubscriptionResponse> = object(
  {
    id: ['id', string()],
    code: ['code', string()],
    startAt: ['start_at', string()],
    interval: ['interval', string()],
    intervalCount: ['interval_count', number()],
    billingType: ['billing_type', string()],
    currentCycle: [
      'current_cycle',
      optional(lazy(() => getPeriodResponseSchema)),
    ],
    paymentMethod: ['payment_method', string()],
    currency: ['currency', string()],
    installments: ['installments', number()],
    status: ['status', string()],
    createdAt: ['created_at', string()],
    updatedAt: ['updated_at', string()],
    customer: ['customer', optional(lazy(() => getCustomerResponseSchema))],
    card: ['card', lazy(() => getCardResponseSchema)],
    items: ['items', array(lazy(() => getSubscriptionItemResponseSchema))],
    statementDescriptor: ['statement_descriptor', string()],
    metadata: ['metadata', dict(string())],
    setup: ['setup', lazy(() => getSetupResponseSchema)],
    gatewayAffiliationId: ['gateway_affiliation_id', string()],
    nextBillingAt: ['next_billing_at', optional(string())],
    billingDay: ['billing_day', optional(number())],
    minimumPrice: ['minimum_price', optional(number())],
    canceledAt: ['canceled_at', optional(string())],
    discounts: [
      'discounts',
      optional(array(lazy(() => getDiscountResponseSchema))),
    ],
    increments: ['increments', array(lazy(() => getIncrementResponseSchema))],
    boletoDueDays: ['boleto_due_days', optional(number())],
    split: ['split', lazy(() => getSubscriptionSplitResponseSchema)],
  }
);

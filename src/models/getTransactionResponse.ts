/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  dict,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  GetAntifraudResponse,
  getAntifraudResponseSchema,
} from './getAntifraudResponse';
import { GetFineResponse, getFineResponseSchema } from './getFineResponse';
import {
  GetGatewayResponseResponse,
  getGatewayResponseResponseSchema,
} from './getGatewayResponseResponse';
import {
  GetInterestResponse,
  getInterestResponseSchema,
} from './getInterestResponse';
import { GetSplitResponse, getSplitResponseSchema } from './getSplitResponse';

/** Generic response object for getting a transaction. */
export interface GetTransactionResponse {
  /** Gateway transaction id */
  gatewayId: string;
  /** Amount in cents */
  amount: number;
  /** Transaction status */
  status: string;
  /** Indicates if the transaction ocurred successfuly */
  success: boolean;
  /** Creation date */
  createdAt: string;
  /** Last update date */
  updatedAt: string;
  /** Number of attempts tried */
  attemptCount: number;
  /** Max attempts */
  maxAttempts: number;
  /** Splits */
  splits: GetSplitResponse[];
  /** Date and time of the next attempt */
  nextAttempt?: string;
  transactionType?: string;
  /** Código da transação */
  id: string;
  /** The Gateway Response */
  gatewayResponse: GetGatewayResponseResponse;
  antifraudResponse: GetAntifraudResponse;
  metadata?: Record<string, string>;
  split: GetSplitResponse[];
  interest?: GetInterestResponse;
  fine?: GetFineResponse;
  maxDaysToPayPastDue?: number;
}

export const getTransactionResponseSchema: Schema<GetTransactionResponse> = object(
  {
    gatewayId: ['gateway_id', string()],
    amount: ['amount', number()],
    status: ['status', string()],
    success: ['success', boolean()],
    createdAt: ['created_at', string()],
    updatedAt: ['updated_at', string()],
    attemptCount: ['attempt_count', number()],
    maxAttempts: ['max_attempts', number()],
    splits: ['splits', array(lazy(() => getSplitResponseSchema))],
    nextAttempt: ['next_attempt', optional(string())],
    transactionType: ['transaction_type', optional(string())],
    id: ['id', string()],
    gatewayResponse: [
      'gateway_response',
      lazy(() => getGatewayResponseResponseSchema),
    ],
    antifraudResponse: [
      'antifraud_response',
      lazy(() => getAntifraudResponseSchema),
    ],
    metadata: ['metadata', optional(dict(string()))],
    split: ['split', array(lazy(() => getSplitResponseSchema))],
    interest: ['interest', optional(lazy(() => getInterestResponseSchema))],
    fine: ['fine', optional(lazy(() => getFineResponseSchema))],
    maxDaysToPayPastDue: ['max_days_to_pay_past_due', optional(number())],
  }
);

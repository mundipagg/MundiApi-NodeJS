/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  dict,
  lazy,
  literal,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { getAntifraudResponseSchema } from './getAntifraudResponse';
import {
  GetBillingAddressResponse,
  getBillingAddressResponseSchema,
} from './getBillingAddressResponse';
import { getFineResponseSchema } from './getFineResponse';
import { getGatewayResponseResponseSchema } from './getGatewayResponseResponse';
import { getInterestResponseSchema } from './getInterestResponse';
import { getSplitResponseSchema } from './getSplitResponse';
import { GetTransactionResponse } from './getTransactionResponse';

/** Response object for getting a boleto transaction */
export interface GetBoletoTransactionResponse extends GetTransactionResponse {
  url: string;
  barcode: string;
  nossoNumero: string;
  bank: string;
  documentNumber: string;
  instructions: string;
  billingAddress: GetBillingAddressResponse;
  dueAt?: string;
  qrCode: string;
  line: string;
  pdfPassword: string;
  pdf: string;
  paidAt?: string;
  paidAmount: string;
  type: string;
  creditAt?: string;
}

export const getBoletoTransactionResponseSchema: Schema<any> = object({
  url: ['url', string()],
  barcode: ['barcode', string()],
  nossoNumero: ['nosso_numero', string()],
  bank: ['bank', string()],
  documentNumber: ['document_number', string()],
  instructions: ['instructions', string()],
  billingAddress: [
    'billing_address',
    lazy(() => getBillingAddressResponseSchema),
  ],
  dueAt: ['due_at', optional(string())],
  qrCode: ['qr_code', string()],
  line: ['line', string()],
  pdfPassword: ['pdf_password', string()],
  pdf: ['pdf', string()],
  paidAt: ['paid_at', optional(string())],
  paidAmount: ['paid_amount', string()],
  type: ['type', string()],
  creditAt: ['credit_at', optional(string())],
  gatewayId: ['gateway_id', string()],
  amount: ['amount', number()],
  status: ['status', string()],
  success: ['success', boolean()],
  createdAt: ['created_at', string()],
  updatedAt: ['updated_at', string()],
  attemptCount: ['attempt_count', number()],
  maxAttempts: ['max_attempts', number()],
  splits: ['splits', array(lazy(() => getSplitResponseSchema))],
  nextAttempt: ['next_attempt', optional(string())],
  id: ['id', string()],
  gatewayResponse: [
    'gateway_response',
    lazy(() => getGatewayResponseResponseSchema),
  ],
  antifraudResponse: [
    'antifraud_response',
    lazy(() => getAntifraudResponseSchema),
  ],
  metadata: ['metadata', optional(dict(string()))],
  split: ['split', array(lazy(() => getSplitResponseSchema))],
  interest: ['interest', optional(lazy(() => getInterestResponseSchema))],
  fine: ['fine', optional(lazy(() => getFineResponseSchema))],
  maxDaysToPayPastDue: ['max_days_to_pay_past_due', optional(number())],
  transactionType: ['transaction_type', optional(literal('boleto'))],
});

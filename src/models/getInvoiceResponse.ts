/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  dict,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  GetBillingAddressResponse,
  getBillingAddressResponseSchema,
} from './getBillingAddressResponse';
import {
  GetChargeResponse,
  getChargeResponseSchema,
} from './getChargeResponse';
import {
  GetCustomerResponse,
  getCustomerResponseSchema,
} from './getCustomerResponse';
import {
  GetInvoiceItemResponse,
  getInvoiceItemResponseSchema,
} from './getInvoiceItemResponse';
import {
  GetPeriodResponse,
  getPeriodResponseSchema,
} from './getPeriodResponse';
import {
  GetShippingResponse,
  getShippingResponseSchema,
} from './getShippingResponse';
import {
  GetSubscriptionResponse,
  getSubscriptionResponseSchema,
} from './getSubscriptionResponse';

/** Response object for getting an invoice */
export interface GetInvoiceResponse {
  id: string;
  code: string;
  url: string;
  amount: number;
  status: string;
  paymentMethod: string;
  createdAt: string;
  items: GetInvoiceItemResponse[];
  customer?: GetCustomerResponse;
  charge: GetChargeResponse;
  installments: number;
  billingAddress: GetBillingAddressResponse;
  subscription: GetSubscriptionResponse;
  cycle?: GetPeriodResponse;
  shipping: GetShippingResponse;
  metadata: Record<string, string>;
  dueAt?: string;
  canceledAt?: string;
  billingAt?: string;
  seenAt?: string;
  /** Total discounted value */
  totalDiscount?: number;
  /** Total discounted value */
  totalIncrement?: number;
  /** Subscription Id */
  subscriptionId: string;
}

export const getInvoiceResponseSchema: Schema<any> = object({
  id: ['id', string()],
  code: ['code', string()],
  url: ['url', string()],
  amount: ['amount', number()],
  status: ['status', string()],
  paymentMethod: ['payment_method', string()],
  createdAt: ['created_at', string()],
  items: ['items', array(lazy(() => getInvoiceItemResponseSchema))],
  customer: ['customer', optional(lazy(() => getCustomerResponseSchema))],
  charge: ['charge', lazy(() => getChargeResponseSchema)],
  installments: ['installments', number()],
  billingAddress: [
    'billing_address',
    lazy(() => getBillingAddressResponseSchema),
  ],
  subscription: ['subscription', lazy(() => getSubscriptionResponseSchema)],
  cycle: ['cycle', optional(lazy(() => getPeriodResponseSchema))],
  shipping: ['shipping', lazy(() => getShippingResponseSchema)],
  metadata: ['metadata', dict(string())],
  dueAt: ['due_at', optional(string())],
  canceledAt: ['canceled_at', optional(string())],
  billingAt: ['billing_at', optional(string())],
  seenAt: ['seen_at', optional(string())],
  totalDiscount: ['total_discount', optional(number())],
  totalIncrement: ['total_increment', optional(number())],
  subscriptionId: ['subscription_id', string()],
});

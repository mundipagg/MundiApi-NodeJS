/**
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  GetAddressResponse,
  getAddressResponseSchema,
} from './getAddressResponse';
import {
  GetCheckoutBankTransferPaymentResponse,
  getCheckoutBankTransferPaymentResponseSchema,
} from './getCheckoutBankTransferPaymentResponse';
import {
  GetCheckoutBoletoPaymentResponse,
  getCheckoutBoletoPaymentResponseSchema,
} from './getCheckoutBoletoPaymentResponse';
import {
  GetCheckoutCreditCardPaymentResponse,
  getCheckoutCreditCardPaymentResponseSchema,
} from './getCheckoutCreditCardPaymentResponse';
import {
  GetCheckoutDebitCardPaymentResponse,
  getCheckoutDebitCardPaymentResponseSchema,
} from './getCheckoutDebitCardPaymentResponse';
import {
  GetCustomerResponse,
  getCustomerResponseSchema,
} from './getCustomerResponse';
import {
  GetShippingResponse,
  getShippingResponseSchema,
} from './getShippingResponse';

/** Resposta das configurações de pagamento do checkout */
export interface GetCheckoutPaymentResponse {
  id: string;
  /** Valor em centavos */
  amount?: number;
  /** Meio de pagamento padrão no checkout */
  defaultPaymentMethod: string;
  /** Url de redirecionamento de sucesso após o checkou */
  successUrl: string;
  /** Url para pagamento usando o checkout */
  paymentUrl: string;
  /** Código da afiliação onde o pagamento será processado no gateway */
  gatewayAffiliationId: string;
  /** Meios de pagamento aceitos no checkout */
  acceptedPaymentMethods: string[];
  /** Status do checkout */
  status: string;
  /** Pular tela de sucesso pós-pagamento? */
  skipCheckoutSuccessPage: boolean;
  /** Data de criação */
  createdAt: string;
  /** Data de atualização */
  updatedAt: string;
  /** Data de cancelamento */
  canceledAt?: string;
  /** Torna o objeto customer editável */
  customerEditable: boolean;
  /** Dados do comprador */
  customer?: GetCustomerResponse;
  /** Dados do endereço de cobrança */
  billingaddress: GetAddressResponse;
  /** Configurações de cartão de crédito */
  creditCard: GetCheckoutCreditCardPaymentResponse;
  /** Configurações de boleto */
  boleto: GetCheckoutBoletoPaymentResponse;
  /** Indica se o billing address poderá ser editado */
  billingAddressEditable: boolean;
  /** Configurações  de entrega */
  shipping: GetShippingResponse;
  /** Indica se possui entrega */
  shippable: boolean;
  /** Data de fechamento */
  closedAt?: string;
  /** Data de expiração */
  expiresAt?: string;
  /** Moeda */
  currency: string;
  /** Configurações de cartão de débito */
  debitCard?: GetCheckoutDebitCardPaymentResponse;
  /** Bank transfer payment response */
  bankTransfer?: GetCheckoutBankTransferPaymentResponse;
  /** Accepted Brands */
  acceptedBrands: string[];
}

export const getCheckoutPaymentResponseSchema: Schema<GetCheckoutPaymentResponse> = object(
  {
    id: ['id', string()],
    amount: ['amount', optional(number())],
    defaultPaymentMethod: ['default_payment_method', string()],
    successUrl: ['success_url', string()],
    paymentUrl: ['payment_url', string()],
    gatewayAffiliationId: ['gateway_affiliation_id', string()],
    acceptedPaymentMethods: ['accepted_payment_methods', array(string())],
    status: ['status', string()],
    skipCheckoutSuccessPage: ['skip_checkout_success_page', boolean()],
    createdAt: ['created_at', string()],
    updatedAt: ['updated_at', string()],
    canceledAt: ['canceled_at', optional(string())],
    customerEditable: ['customer_editable', boolean()],
    customer: ['customer', optional(lazy(() => getCustomerResponseSchema))],
    billingaddress: ['billingaddress', lazy(() => getAddressResponseSchema)],
    creditCard: [
      'credit_card',
      lazy(() => getCheckoutCreditCardPaymentResponseSchema),
    ],
    boleto: ['boleto', lazy(() => getCheckoutBoletoPaymentResponseSchema)],
    billingAddressEditable: ['billing_address_editable', boolean()],
    shipping: ['shipping', lazy(() => getShippingResponseSchema)],
    shippable: ['shippable', boolean()],
    closedAt: ['closed_at', optional(string())],
    expiresAt: ['expires_at', optional(string())],
    currency: ['currency', string()],
    debitCard: [
      'debit_card',
      optional(lazy(() => getCheckoutDebitCardPaymentResponseSchema)),
    ],
    bankTransfer: [
      'bank_transfer',
      optional(lazy(() => getCheckoutBankTransferPaymentResponseSchema)),
    ],
    acceptedBrands: ['accepted_brands', array(string())],
  }
);
